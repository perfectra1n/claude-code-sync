searchState.loadedDescShard("claude_code_sync", 0, "claude-code-sync\nVerbosity level for command output\nPlatform-agnostic configuration directory management for …\nConflict detection and resolution for conversation …\nFile filtering configuration for selective synchronization.\nReturns the argument unchanged.\nGit repository operations for conversation history …\nOperation history tracking and persistence.\nInteractive terminal-based conflict resolution interface.\nCalls <code>U::from(self)</code>.\nLogging configuration and utilities.\nSmart merge functionality for combining divergent …\nInteractive onboarding flow for first-time setup.\nJSONL conversation file parsing and serialization.\nConflict report generation and formatting.\nCore synchronization logic for pushing and pulling …\nSnapshot-based undo functionality for sync operations.\nCross-platform configuration directory manager\nGet the main configuration directory path following …\nGet the latest conflict report path\nGet the default repository clone directory\nEnsure the configuration directory exists\nEnsure the snapshots directory exists\nGet the filter config file path (config.toml)\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nGet the log file path\nGet the operation history file path\nGet the snapshots directory path\nGet the state file path (state.json)\nRepresents a conflict between local and remote versions of …\nConflict detector for conversation sessions\nRepresents the resolution strategy for a conversation …\nKeep both versions by renaming the remote file with a …\nKeep only the local version and discard the remote version.\nKeep only the remote version and discard the local version.\nThe conflict has not yet been resolved.\nIntelligently merge both versions into a single …\nGet count of conflicts\nGet all detected conflicts\nGet mutable reference to all detected conflicts\nGet a human-readable description of the conflict\nCompare local and remote sessions and detect conflicts\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCheck if any conflicts were detected\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nDetermine if this is a real conflict (different content)\nThe file path to the local version of the conversation.\nA hash of the local conversation’s content.\nThe total number of messages in the local version of the …\nThe timestamp of the most recent message in the local …\nCreates a new <code>ConflictDetector</code> with an empty conflict list.\nCreates a new <code>Conflict</code> by comparing local and remote …\nThe file path to the remote version of the conversation.\nA hash of the remote conversation’s content.\nThe total number of messages in the remote version of the …\nThe timestamp of the most recent message in the remote …\nThe current resolution status of the conflict.\nResolve all conflicts using the “keep both” strategy\nResolve the conflict by keeping both versions\nThe unique identifier for the conversation session that …\nAttempts to resolve the conflict using smart merge\nThe merged conversation entries\nThe destination path for the renamed remote file, …\nStatistics about the merge operation\nFilter configuration for syncing Claude Code history\nExclude file attachments (images, PDFs, etc.)\nExclude projects older than N days\nExclude these project path patterns (glob-style)\nReturns the argument unchanged.\nInclude only these project path patterns (glob-style)\nCalls <code>U::from(self)</code>.\nLoad configuration from file\nMaximum file size in bytes (default: 10MB)\nSave configuration to file\nCheck if a file should be included based on filters\nShow the current filter configuration\nUpdate the filter configuration\nGit repository manager for Claude Code history\nAdd a remote to the repository\nClone a remote repository\nCreate a commit with all staged changes\nGet current branch name\nGet the current commit hash (HEAD)\nFetch from remote\nReturns the argument unchanged.\nCheck if repository has uncommitted changes\nCheck if a remote exists\nInitialize a new repository\nCalls <code>U::from(self)</code>.\nOpen an existing repository\nPull from remote (fetch + merge)\nPush to remote\nStage all changes in the working directory\nConversation was newly added\nConflict detected that needs resolution\nSummary of a conversation affected during a sync operation\nExisting conversation was modified\nManages operation history with persistence to disk\nRecord of a single sync operation\nType of sync operation performed\nPull operation: syncing from remote to local\nPush operation: syncing from local to remote\nType of operation performed on a specific conversation …\nConversation exists but was not changed\nAdd a new operation record to history Automatically …\nList of conversations affected by this operation\nReturns a human-readable string representation\nReturns a human-readable string representation\nGit branch the operation was performed on (if available)\nClear all operation history\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nLoad operation history from a custom path Creates a new …\nGet the most recent operation record\nGet the most recent operation of a specific type\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCheck if history is empty\nGet the number of operations in history\nGet all operation records\nLoad operation history from disk using default location …\nNumber of messages in the conversation\nCreate a new operation record\nCreate a new conversation summary with validation\nType of operation performed on this conversation\nCount conversations by operation type\nType of operation (pull or push)\nList of operation records, most recent first\nRelative path from claude projects directory\nRemove the most recent operation of a specific type\nSave operation history to disk using default location\nSave operation history to a custom path\nUnique identifier for the conversation session\nPath to snapshot for undo capability\nGet a summary string for this operation\nWhen the operation was performed\nTimestamp of the conversation (if available)\nKeep both versions by saving the remote file with a …\nKeep the local version and discard the remote changes\nKeep the remote version and overwrite the local file\nResolution action chosen by the user\nResult of interactive conflict resolution\nIntelligently merge both versions (default/recommended)\nView detailed comparison of the conflicting files (does …\nApply the resolution results by copying/writing files\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCheck if we’re running in an interactive terminal\nConflicts that should keep both versions (rename remote)\nConflicts that should keep local version (discard remote)\nConflicts that should keep remote version (overwrite local)\nCreates a new empty ResolutionResult with all conflict …\nBackward-compatible version of …\nInteractively resolve all conflicts\nConflicts resolved via smart merge\nTotal number of conflicts resolved\nInitialize the logging system\nLog to file only (useful for background operations or …\nRotate log file if it exceeds the size limit (default: …\nResult of a smart merge operation\nStatistics about a merge operation\nRepresents a node in the conversation message tree.\nSmart merger for combining conversation sessions\nNumber of conversation branches detected\nChild nodes (messages that have this message as their …\nNumber of duplicate messages detected\nNumber of edited messages detected and resolved\nThe conversation entry for this node\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nNumber of messages from local\nPerforms the smart merge and returns the result\nAttempts to perform a smart merge on two conversation …\nThe merged conversation entries\nNumber of messages in merged result\nCreates a new smart merger for the given sessions\nNumber of messages from remote\nStatistics about the merge\nNumber of entries merged by timestamp (non-UUID entries)\nOnboarding configuration result\nWhether to exclude file attachments when syncing …\nOptional threshold (in days) for excluding old …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nIndicates whether the repository should be cloned from the …\nOptional remote git repository URL for syncing …\nPath to the local git repository for storing conversation …\nRun the interactive onboarding flow\nRepresents a single line/entry in the JSONL conversation …\nRepresents a complete conversation session\nCalculate a simple hash of the conversation content\nCurrent working directory at the time this entry was …\nAll conversation entries in chronological order\nThe type of this entry (e.g., “user”, “assistant”, …\nCatch-all field for additional JSON properties not …\nPath to the JSONL file this session was loaded from\nReturns the argument unchanged.\nReturns the argument unchanged.\nParse a JSONL file into a ConversationSession\nGit branch name active when this entry was created\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nGet the latest timestamp from the conversation\nThe actual message content as a JSON value\nGet the number of messages (user + assistant) in the …\nUUID of the parent entry in the conversation thread\nSession identifier grouping related conversation entries …\nUnique identifier for this conversation session\nISO 8601 timestamp indicating when this entry was created\nUnique identifier for this conversation entry\nVersion string of the Claude Code CLI that created this …\nWrite the conversation session to a JSONL file\nDetailed information about a specific conflict between …\nReport of sync conflicts encountered during Claude Code …\nDetailed information about each individual conflict\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreate a new conflict report from detected conflicts\nGenerate and output a conflict report\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nLoad the latest conflict report from the sync state\nPath to the local conversation file\nNumber of messages in the local conversation file\nLast modification timestamp of the local conversation file\nPrint a colored console summary\nPath to the remote conversation file\nNumber of messages in the remote conversation file\nLast modification timestamp of the remote conversation file\nThe resolution strategy applied or pending for this …\nSave report to file\nSave a conflict report to the sync state\nUnique identifier for the Claude Code conversation session\nISO 8601 timestamp indicating when this report was …\nGenerate a JSON report\nGenerate a markdown report\nTotal number of conflicts detected in this sync operation\nSync state and configuration\nReturns the argument unchanged.\nWhether the sync repository has a remote configured\nInitialize sync repository from onboarding config\nInitialize a new sync repository\nCalls <code>U::from(self)</code>.\nWhether the repository was cloned from a remote URL\nLoads the sync state from the user’s configuration …\nPull and merge history from sync repository\nPush local Claude Code history to sync repository\nRemove a remote\nSet or update remote URL\nShow current remote configuration\nShow sync status\nBidirectional sync: pull remote changes, then push local …\nPath to the local git repository used for syncing Claude …\nRepresents a snapshot of conversation files at a point in …\nConfiguration for snapshot cleanup\nPreview information for an undo operation\nVerbosity level for preview display\nList of files that will be affected\nBase snapshot ID for differential snapshots\nGit branch name at the time of snapshot\nBranch name\nClean up old snapshots using the default snapshots …\nClean up old snapshots based on age and count limits\nGit commit hash (for push operations)\nNumber of conversations affected\nCreate a new snapshot from a set of file paths\nCreate a differential snapshot using the default snapshots …\nCreate a differential snapshot that only stores changes …\nFiles that were deleted since the base snapshot\nDisplay a formatted preview of the undo operation with …\nMapping of file paths (relative to Claude projects dir) to …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGit commit hash before the operation (for push operations)\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nLoad a snapshot from disk\nKeep snapshots newer than this many days\nKeep at most this many snapshots per operation type …\nWhen the original operation occurred\nType of operation this snapshot was created for\nOperation type being undone\nPreview the last pull operation without executing it\nPreview the last push operation without executing it\nReconstruct the full file state by walking the snapshot …\nRestore files from this snapshot\nRestore files from this snapshot using default snapshots …\nRestore files from this snapshot\nSave this snapshot to disk\nUnique identifier for this snapshot\nSnapshot creation timestamp\nWhen this snapshot was created\nUndo the last pull operation\nUndo the last push operation")