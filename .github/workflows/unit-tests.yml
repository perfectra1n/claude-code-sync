name: Unit Tests

on:
  push:
    branches: [ master, develop ]
  pull_request:
    branches: [ master ]
  workflow_dispatch:

env:
  CARGO_TERM_COLOR: always

jobs:
  unit-tests:
    name: Run Unit Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Cache cargo registry
        uses: actions/cache@v4
        with:
          path: ~/.cargo/registry
          key: ubuntu-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ubuntu-cargo-registry-

      - name: Cache cargo index
        uses: actions/cache@v4
        with:
          path: ~/.cargo/git
          key: ubuntu-cargo-git-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ubuntu-cargo-git-

      - name: Cache cargo build
        uses: actions/cache@v4
        with:
          path: target
          key: ubuntu-cargo-build-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ubuntu-cargo-build-

      - name: Run unit tests
        run: cargo test --lib --verbose

      - name: Run doc tests
        run: cargo test --doc --verbose

  code-quality:
    name: Code Quality Checks
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt, clippy

      - name: Cache cargo registry
        uses: actions/cache@v4
        with:
          path: ~/.cargo/registry
          key: ubuntu-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ubuntu-cargo-registry-

      - name: Cache cargo index
        uses: actions/cache@v4
        with:
          path: ~/.cargo/git
          key: ubuntu-cargo-git-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ubuntu-cargo-git-

      - name: Check code formatting
        run: cargo fmt -- --check

      - name: Run clippy
        run: cargo clippy --all-targets --all-features -- -D warnings

  coverage:
    name: Code Coverage
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Install tarpaulin
        run: cargo install cargo-tarpaulin

      - name: Generate coverage report
        run: cargo tarpaulin --lib --out xml --verbose --timeout 300

      - name: Display coverage summary
        run: cargo tarpaulin --lib --out stdout --verbose --timeout 300
