name: Build Test

on:
  push:
    branches: [ master, develop ]
  pull_request:
    branches: [ master ]
  workflow_dispatch:

env:
  CARGO_TERM_COLOR: always

jobs:
  build-debug:
    name: Build Debug
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        rust: [stable, beta]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: ${{ matrix.rust }}

      - name: Cache cargo registry
        uses: actions/cache@v4
        with:
          path: ~/.cargo/registry
          key: ${{ runner.os }}-${{ matrix.rust }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-${{ matrix.rust }}-cargo-registry-

      - name: Cache cargo index
        uses: actions/cache@v4
        with:
          path: ~/.cargo/git
          key: ${{ runner.os }}-${{ matrix.rust }}-cargo-git-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-${{ matrix.rust }}-cargo-git-

      - name: Cache cargo build
        uses: actions/cache@v4
        with:
          path: target
          key: ${{ runner.os }}-${{ matrix.rust }}-cargo-debug-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-${{ matrix.rust }}-cargo-debug-

      - name: Build debug binary
        run: cargo build --verbose --all-features

      - name: Check binary size (Unix)
        if: runner.os != 'Windows'
        run: |
          ls -lh target/debug/claude-sync
          du -h target/debug/claude-sync

      - name: Check binary size (Windows)
        if: runner.os == 'Windows'
        run: |
          Get-Item target\debug\claude-sync.exe | Format-List
        shell: pwsh

  build-release:
    name: Build Release
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            artifact_name: claude-sync
          - os: ubuntu-latest
            target: x86_64-unknown-linux-musl
            artifact_name: claude-sync
          - os: macos-latest
            target: x86_64-apple-darwin
            artifact_name: claude-sync
          - os: macos-latest
            target: aarch64-apple-darwin
            artifact_name: claude-sync
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            artifact_name: claude-sync.exe
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Install musl tools (Linux musl only)
        if: matrix.target == 'x86_64-unknown-linux-musl'
        run: |
          sudo apt-get update
          sudo apt-get install -y musl-tools

      - name: Cache cargo registry
        uses: actions/cache@v4
        with:
          path: ~/.cargo/registry
          key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-registry-

      - name: Cache cargo index
        uses: actions/cache@v4
        with:
          path: ~/.cargo/git
          key: ${{ runner.os }}-cargo-git-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-git-

      - name: Cache cargo build
        uses: actions/cache@v4
        with:
          path: target
          key: ${{ runner.os }}-${{ matrix.target }}-cargo-release-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-${{ matrix.target }}-cargo-release-

      - name: Build release binary
        run: cargo build --release --target ${{ matrix.target }} --verbose

      - name: Check binary size (Unix)
        if: runner.os != 'Windows'
        run: |
          ls -lh target/${{ matrix.target }}/release/${{ matrix.artifact_name }}
          du -h target/${{ matrix.target }}/release/${{ matrix.artifact_name }}

      - name: Check binary size (Windows)
        if: runner.os == 'Windows'
        run: |
          Get-Item target\${{ matrix.target }}\release\${{ matrix.artifact_name }} | Format-List
        shell: pwsh

      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.target }}-binary
          path: target/${{ matrix.target }}/release/${{ matrix.artifact_name }}
          retention-days: 7

  security-audit:
    name: Security Audit
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Cache cargo-audit
        uses: actions/cache@v4
        with:
          path: ~/.cargo/bin/cargo-audit
          key: cargo-audit-${{ runner.os }}

      - name: Install cargo-audit
        run: cargo install cargo-audit --locked

      - name: Run security audit
        run: cargo audit

  dependency-check:
    name: Dependency Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Check dependencies
        run: cargo tree

      - name: Check for outdated dependencies
        run: |
          cargo install cargo-outdated --locked
          cargo outdated --exit-code 1 || echo "Some dependencies are outdated"
